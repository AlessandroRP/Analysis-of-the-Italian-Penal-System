---
title: "R Notebook"
output: html_notebook
editor_options: 
  chunk_output_type: console
---
# Installazione dei pacchetti necessari
# if (!require("readxl")) install.packages("readxl")
# if (!require("ggplot2")) install.packages("ggplot2")
# if (!require("dplyr")) install.packages("dplyr")
# if (!require("FactoMineR")) install.packages("FactoMineR")
# if (!require("factoextra")) install.packages("factoextra")

library(readxl)
library(ggplot2)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(ggplot2)

# Caricamento del file Excel
file_path <- "C:/Users/volan/OneDrive - uniroma1.it/Università/Management Tools for business data analyst/Progetto/Excel/DB Esecuzione penale esterna.xlsx"

# Modifica con il tuo percorso
data <- read_excel(file_path, sheet = "Sheet 1")

# Conversione delle colonne non numeriche in NA e selezione delle variabili numeriche
data_numeric <- data %>%
  mutate(across(where(is.character), ~ as.numeric(.), .names = "numeric_{col}")) %>%
  select(where(is.numeric))
# Vediamo se ha preso tutto bene (PROVA DEL 9)
non_numeric_cols <- data %>%
  select(where(is.character)) %>%
  summarise(across(everything(), ~ sum(is.na(as.numeric(.))), .names = "NA_count_{col}"))

print(non_numeric_cols)

# Sostituzione dei NA con la media delle colonne
data_cleaned <- data_numeric %>%
  mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))

# Standardizzazione delle variabili numeriche
data_scaled <- scale(data_cleaned)

# Controlla se ci sono NA o Inf nei dati scalati
any(is.na(data_scaled))  # TRUE se ci sono NA
any(is.infinite(data_scaled))  # TRUE se ci sono valori Inf o -Inf

# Pulizia dei dati
data_scaled[is.na(data_scaled)] <- 0  # Sostituisci NA con 0 (o media)

# Controlla se ci sono NA o Inf nei dati scalati
any(is.na(data_scaled))  # TRUE se ci sono NA
any(is.infinite(data_scaled))  # TRUE se ci sono valori Inf o -Inf

# Calcolo delle PCA
pca_result <- PCA(data_scaled, graph = FALSE)

# Grafico della varianza spiegata
fviz_eig(pca_result, addlabels = TRUE)


# Biplot per visualizzare le variabili
fviz_pca_var(pca_result, col.var = "black")


# Grafico del contributo delle variabili
fviz_cos2(pca_result, choice = "var", axes = 1:2)

# Biplot con variabili colorate in base al cos²
fviz_pca_var(pca_result, col.var = "cos2",
             gradient.cols = c("black", "orange", "green"),
             repel = TRUE)
# Proiezione delle osservazioni sulle prime due componenti principali
pca_data <- data.frame(pca_result$ind$coord)
pca_data$ID <- rownames(data)

ggplot(pca_data, aes(x = Dim.1, y = Dim.2)) +
  geom_point() +
  theme_minimal() +
  labs(title = "Proiezione sulle prime due componenti principali",
       x = "PCA 1", y = "PCA 2")

#Check per colorare
# Controlla le colonne di pca_data
colnames(pca_data)

# Supponendo che la colonna "Region" esista in data
pca_data$Region <- data$Region

# Controlla le colonne di pca_data
colnames(pca_data)

# Andiamo a mettere i colori alle occorrenze delle varie regioni
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Region)) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(title = "Proiezione con regioni colorate (palette personalizzata)",
       x = "PCA 1", y = "PCA 2") +
  scale_color_manual(values = c(
    "red", "blue", "green", "orange", "purple", "brown", "pink", "cyan", "yellow", "black",
    "darkred", "darkblue", "darkgreen", "gold", "violet", "chocolate", "turquoise", "gray", "darkorange", "navy"
  ))


# Ora vado ad identificare quali sono le variabili sotto a PCA 1/2/3
# Loadings delle variabili
loadings <- pca_result$var$coord

# Visualizza i loadings per le prime tre componenti
head(loadings[, 1:3])

# Ordina le variabili in base all'importanza per PCA 1
loading_pca1 <- loadings[order(abs(loadings[, 1]), decreasing = TRUE), 1]

# Ordina per PCA 2
loading_pca2 <- loadings[order(abs(loadings[, 2]), decreasing = TRUE), 2]

# Ordina per PCA 3
loading_pca3 <- loadings[order(abs(loadings[, 3]), decreasing = TRUE), 3]

# Visualizza i risultati
loading_pca1
loading_pca2
loading_pca3

# Visualizza il contributo delle variabili per PCA 1 e PCA 2
fviz_pca_var(pca_result, axes = c(1, 2),
             col.var = "contrib",
             gradient.cols = c("blue", "yellow", "red"),
             repel = TRUE) +
  labs(title = "Contributo delle variabili (PCA 1 e PCA 2)")

# Visualizza il contributo per PCA 3
fviz_pca_var(pca_result, axes = c(1, 3),
             col.var = "contrib",
             gradient.cols = c("blue", "yellow", "red"),
             repel = TRUE) +
  labs(title = "Contributo delle variabili (PCA 1 e PCA 3)")

library(dplyr)

# Vediamo se c'è una correlazine in base alla posizione territoriale (Nord, Sud , Centro)
# Calcola i centroidi delle regioni
region_means <- pca_data %>%
  group_by(Region) %>%
  summarise(Dim1_mean = mean(Dim.1), Dim2_mean = mean(Dim.2))

# Visualizza i centroidi per verifica
print(region_means)

# bho
set.seed(123)  # Per risultati riproducibili

# Applica K-means ai centroidi delle regioni
kmeans_regions <- kmeans(region_means[, c("Dim1_mean", "Dim2_mean")], centers = 3)

# Aggiungi i cluster ai dati delle regioni
region_means$Cluster <- as.factor(kmeans_regions$cluster)
library(ggplot2)
ggplot(region_means, aes(x = Dim1_mean, y = Dim2_mean, color = Cluster, label = Region)) +
  geom_point(size = 5) +
  geom_text(vjust = -0.5) +
  theme_minimal() +
  labs(title = "Cluster delle regioni nello spazio PCA",
       x = "PCA 1", y = "PCA 2")

# Aggiungi la macro-area geografica (Nord, Centro, Sud)
region_means$MacroArea <- case_when(
  region_means$Region %in% c("Lombardia", "Veneto", "Piemonte", "Liguria", "Emilia-Romagna", "Trentino-Alto Adige", "Friuli Venezia Giulia", "Valle d'Aosta") ~ "Nord",
  region_means$Region %in% c("Toscana", "Marche", "Lazio", "Umbria") ~ "Centro",
  region_means$Region %in% c("Campania", "Puglia", "Calabria", "Sicilia", "Sardegna", "Abruzzo", "Molise", "Basilicata") ~ "Sud"
)

# Confronta i cluster con le macro-aree
ggplot(region_means, aes(x = Dim1_mean, y = Dim2_mean, color = MacroArea, shape = Cluster)) +
  geom_point(size = 5) +
  geom_text(aes(label = Region), vjust = -0.5) +  # Specifica la colonna 'Region' come etichetta
  theme_minimal() +
  labs(title = "Cluster regionali e macro-aree geografiche",
       x = "PCA 1", y = "PCA 2")

# Confronto punteggi medi
region_means %>%
  group_by(MacroArea) %>%
  summarise(PCA1_mean = mean(Dim1_mean), PCA2_mean = mean(Dim2_mean))


This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}
plot(cars)
```
