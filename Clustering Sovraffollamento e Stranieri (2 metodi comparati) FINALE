---
title: "R Notebook"
output: html_notebook
editor_options: 
  chunk_output_type: console
---

Data preparation
```{r}

options(scipen = 99999999)
library(cluster)
library(ComplexUpset)
library(readr)
library(readxl)
library(ggplot2)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(tidyr)
library(dbscan)
library(reshape2)
library(plotly)

# Caricamento del file Excel
data <- read_excel("C:/Users/volan/OneDrive - uniroma1.it/Università/Management Tools for business data analyst/Progetto/Excel/[03]Detenuti italiani e stranieri al 31 dicembre 2023.xlsx")

# Filtraggio colonne 
data <- data[c(1,2,5,7)]

# Selezione delle variabili numeriche
data_numeric <- data %>% select(-`Regione Di Detenzione`, - `Sigla Provincia`)

# Sostituzione dei NA con la media delle colonne (L'HO TOLTO PERCHè L'ABBIAMO GIà FATTO PRIMA)
#data_cleaned <- data_numeric %>%
#  mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))

# Standardizzazione delle variabili numeriche
data_scaled <- scale(data_numeric)

# Creazione DataFrame
df <- as.data.frame(data_scaled)

# Aggiunta delle variabili Regione Di Detenzione e Sigla Provincia
df$Regione <- data$`Regione Di Detenzione`
df$Provincia <- data$`Sigla Provincia`

```


Data visual
```{r}

# Andiamo a mettere i colori alle occorrenze delle varie regioni
ggplot(df, aes(x = `Percentuale Sovraffollamento`, y = `Percentuale Stranieri`, color = Regione)) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(
    title = "Relazione tra Sovraffollamento e Percentuale di Stranieri nelle Regioni",
    x = "Percentuale Sovraffollamento",
    y = "Percentuale stranieri"
  ) +
  scale_color_manual(values = c(
    "red", "blue", "green", "orange", "purple", "brown", "pink", "cyan", "yellow", "black",
    "darkred", "darkblue", "darkgreen", "gold", "violet", "chocolate", "turquoise", "gray", "darkorange", "navy"
  )) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14)
  )


# Vediamo se c'è una correlazine in base alla posizione territoriale (Nord, Sud , Centro)
# Calcola i centroidi delle regioni
region_means <- df %>%
  group_by(Regione) %>%
  summarise('Media di Percentuale Sovraffollamento' = mean(`Percentuale Sovraffollamento`), 'Media di Percentuale Stranieri' = mean(`Percentuale Stranieri`))
# Visualizza i centroidi per verifica
print(region_means)

```


K-Mean Clustering
```{r}

# Selezioniamo le variabili
df_kmeans <- df %>% select(-Regione, -Provincia)

# Verifica numero ottimale di cluster tramite silhouette
fviz_nbclust(df_kmeans, kmeans, method = "wss")

km.res <- kmeans(df_kmeans, 2)
sil <- silhouette(km.res$cluster, dist(df_kmeans))
fviz_silhouette(sil)

km.res <- kmeans(df_kmeans, 3)
sil <- silhouette(km.res$cluster, dist(df_kmeans))
fviz_silhouette(sil)

km.res <- kmeans(df_kmeans, 4)
sil <- silhouette(km.res$cluster, dist(df_kmeans))
fviz_silhouette(sil)

km.res <- kmeans(df_kmeans, 8)
sil <- silhouette(km.res$cluster, dist(df_kmeans))
fviz_silhouette(sil)

km.res.2 <- kmeans(df_kmeans, 4)

fviz_cluster(km.res.2, data = df_kmeans)+theme_minimal()

# Troviamo la media di ogni cluster
aggregate(df_kmeans, by=list(cluster=km.res.2$cluster), mean)

final_data <- cbind(df_kmeans, Cluster = km.res.2$cluster)

```


Esempi di grafici interpretativi K-Mean Clustering
```{r}

# Prima di tutto, aggiungiamo la colonna dei cluster al dataset per poter fare le visualizzazioni
df$Cluster <- km.res.2$cluster


# 1. Grafico della distribuzione dei cluster nelle prime due componenti principali
ggplot(df, aes(x = `Percentuale Sovraffollamento`, y = `Percentuale Stranieri`, color = as.factor(Cluster))) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(
    title = "Relazione tra Sovraffollamento e Percentuale di Stranieri nei Cluster",
    x = "Percentuale Sovraffollamento",
    y = "Percentuale Stranieri",
    color = "Cluster"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  
    legend.title = element_text(face = "bold"),  
    axis.text = element_text(size = 10),  
    legend.text = element_text(size = 10) 
  )


# 2. Grafico dei cluster suddivisi per Regione
ggplot(df, aes(x = `Percentuale Sovraffollamento`, y = `Percentuale Stranieri`, color = Regione, shape = as.factor(Cluster))) +
  geom_point(size = 4, alpha = 0.8) +  
  theme_minimal() +
  labs(
    title = "Distribuzione dei Cluster Suddivisi per Regione",
    x = "Percentuale Sovraffollamento",
    y = "Percentuale Stranieri",
    color = "Regione",
    shape = "Cluster"
  ) +
  scale_color_manual(values = c(
    "red", "blue", "green", "orange", "purple", "brown", "pink", "cyan", "yellow", "black",
    "darkred", "darkblue", "darkgreen", "gold", "violet", "chocolate", "turquoise", "gray", "darkorange", "navy"
  )) +
  scale_shape_manual(values = c(
    "1" = 16,  
    "2" = 17,  
    "3" = 15,  
    "4" = 18    
  )) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  
    legend.position = "top",  
    legend.box = "horizontal",  
    legend.box.just = "center",  
    legend.spacing.y = unit(0.3, "cm"),  
    legend.text = element_text(size = 10),  
    legend.title = element_text(face = "bold", size = 11),  
    legend.justification = "center"  
  ) +
  guides(
    color = guide_legend(title.position = "top", title.hjust = 0.5), 
    shape = guide_legend(title.position = "left", title.hjust = 0.5)  
  )


# 3. Boxplot dei cluster per variabili specifiche, suddivisi per Regione
ggplot(df, aes(x = as.factor(Cluster), y = `Percentuale Sovraffollamento`, fill = as.factor(Cluster))) +
  geom_boxplot(outlier.shape = NA, alpha = 0.6) +  # Boxplot semi-trasparente senza outlier visibili
  geom_jitter(aes(color = as.factor(Cluster)), width = 0.2, size = 1.5, alpha = 0.8) +  # Aggiunge punti jitterati
  theme_minimal() +
  labs(
    title = "Distribuzione per cluster: Sovraffollamento",
    x = "Cluster",
    y = "Percentuale Sovraffollamento"
  ) +
  scale_fill_manual(values = c("lightblue", "lightgreen", "lightcoral", "gray")) +  # Colori per i boxplot
  scale_color_manual(values = c("blue", "green", "red", "darkgray")) +  # Colori per i punti jitterati
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Titolo centrato e in grassetto
    legend.position = "none",  # Rimuove la legenda
    axis.text = element_text(size = 10)  # Testo degli assi migliorato
  )


# 4. Grafico a barre della media di sovraffollamento per ciascun cluster, diviso per Regione
aggregate_data <- df %>%
  group_by(Cluster, Regione) %>%
  summarise(SovraffollamentoMedio = mean(`Percentuale Sovraffollamento`))
ggplot(aggregate_data, aes(x = Regione, y = SovraffollamentoMedio, fill = as.factor(Cluster))) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(
    title = "Media Percentuale Sovraffollamento per Regione e Cluster",
    x = "Regione",
    y = "Percentuale Sovraffollamento",
    fill = "Cluster"
  ) +
  scale_fill_manual(values = c("lightblue", "lightgreen", "lightcoral", "gray")) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Titolo centrato e in grassetto
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotazione delle etichette sull'asse X
    axis.text.y = element_text(size = 10),  # Testo sull'asse Y migliorato
    legend.title = element_text(face = "bold", size = 11),  # Titolo della legenda in grassetto
    legend.text = element_text(size = 10)  # Testo della legenda più leggibile
  )


# 5. Grafico a barre della media di presenza stranieri per ciascun cluster, diviso per Regione
aggregate_data <- df %>%
  group_by(Cluster, Regione) %>%
  summarise(PercentualeStranieriMedia = mean(`Percentuale Stranieri`))
ggplot(aggregate_data, aes(x = Regione, y = PercentualeStranieriMedia, fill = as.factor(Cluster))) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(
    title = "Media Percentuale Stranieri per Regione e Cluster",
    x = "Regione",
    y = "Percentuale Stranieri",
    fill = "Cluster"
  ) +
  scale_fill_manual(values = c("lightblue", "lightgreen", "lightcoral", "gray")) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Titolo centrato e in grassetto
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotazione delle etichette sull'asse X
    axis.text.y = element_text(size = 10),  # Testo sull'asse Y migliorato
    legend.title = element_text(face = "bold", size = 11),  # Titolo della legenda in grassetto
    legend.text = element_text(size = 10)  # Testo della legenda più leggibile
  )



```


Hierarchical Clustering
```{r}

# Selezioniamo le variabili
df_hierarchical <- df %>% select(-Regione, -Provincia)

# Definiamo linkage methods
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

# Function to compute agglomerative coefficient
ac <- function(x) {
  agnes(df_hierarchical, method = x)$ac
}

# Calcoliamo agglomerative coefficient per ogni clustering linkage method
sapply(m, ac)

# WARD SEEMS THE BEST IN AGGLOMERATIVE COEFFICIENT

# Perform hierarchical clustering using Ward's minimum variance
clust <- agnes(df_hierarchical, method = "ward")

# Produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")

# NOW WE NEED TO SELECT THE NUMBER OF CLUSTER (SIMILAR TO THE K IN THE K MEANS)
# WE USE THE GAP STATISTICS

# Calculate gap statistic for each number of clusters (up to 5 clusters)
gap_stat <- clusGap(df_hierarchical, FUN = hcut, nstart = 25, K.max = 5, B = 50)

# Produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)

# THE HIGHEST GAP STASTISTICS IS IN K=3

# Compute distance matrix
d <- dist(df_hierarchical, method = "euclidean")
final_clust <- hclust(d, method = "ward.D2" )
groups <- cutree(final_clust, k=3)
plot(final_clust)
rect.hclust(final_clust, k = 3, border = "green")

df_hierarchical$Regione <- data$`Regione Di Detenzione`
df_hierarchical$Provincia <- data$`Sigla Provincia`

final_data <- cbind(df_hierarchical, cluster = groups)
aggregate(final_data, by=list(cluster=final_data$cluster), mean)

ggplot(final_data) +
  aes(x = `Percentuale Sovraffollamento`, y = `Percentuale Stranieri`, colour = as.factor(cluster)) +
  geom_point(shape = "circle", size = 1.5) +
  theme_minimal()

# Crea il grafico con ggplot2, colorando in base alla regione
ggplot(final_data, aes(x = `Percentuale Sovraffollamento`, y = `Percentuale Stranieri`, color = Regione)) +
  geom_point(shape = "circle", size = 1.5) +
  theme_minimal() +
  labs(title = "Proiezione delle osservazioni colorata per regione",
       x = "Percentuale Sovraffollamento", y = "Percentuale Stranieri") +
  scale_color_manual(values = c(
    "red", "blue", "green", "orange", "purple", "brown", "pink", "cyan", "yellow", 
    "black", "darkred", "darkblue", "darkgreen", "gold", "violet", "chocolate", 
    "turquoise", "gray", "darkorange", "navy"
  )) +
  theme(legend.title = element_blank())  # Rimuove il titolo della legenda

```
